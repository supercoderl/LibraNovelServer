// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using LibraNovel.Domain.Models;
using Microsoft.EntityFrameworkCore;

namespace LibraNovel.Infrastructure.Data.Context;

public partial class LibraNovelContext : DbContext
{
    public LibraNovelContext(DbContextOptions<LibraNovelContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Bookmark> Bookmarks { get; set; }

    public virtual DbSet<Chapter> Chapters { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Genre> Genres { get; set; }

    public virtual DbSet<Menu> Menus { get; set; }

    public virtual DbSet<Novel> Novels { get; set; }

    public virtual DbSet<NovelGenre> NovelGenres { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RolesMenu> RolesMenus { get; set; }

    public virtual DbSet<RolesPermission> RolesPermissions { get; set; }

    public virtual DbSet<Token> Tokens { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UsersRole> UsersRoles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Bookmark>(entity =>
        {
            entity.HasKey(e => e.BookmarkID).HasName("PK__Bookmark__541A3A914D150348");

            entity.ToTable("Bookmark");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Novel).WithMany(p => p.Bookmarks)
                .HasForeignKey(d => d.NovelID)
                .HasConstraintName("FK_Bookmark_Chapter");

            entity.HasOne(d => d.User).WithMany(p => p.Bookmarks)
                .HasForeignKey(d => d.UserID)
                .HasConstraintName("FK_Bookmark_User");
        });

        modelBuilder.Entity<Chapter>(entity =>
        {
            entity.HasKey(e => e.ChapterID).HasName("PK__Chapter__0893A34A9B5E7ADA");

            entity.ToTable("Chapter", tb => tb.HasTrigger("tg_delete_chapter"));

            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.PublishDate).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Novel).WithMany(p => p.Chapters)
                .HasForeignKey(d => d.NovelID)
                .HasConstraintName("FK_Chapter_Novel");
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.CommentID).HasName("PK__Comment__C3B4DFAA58F7939B");

            entity.ToTable("Comment");

            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Chapter).WithMany(p => p.Comments)
                .HasForeignKey(d => d.ChapterID)
                .HasConstraintName("FK_Comment_Chapter");

            entity.HasOne(d => d.Novel).WithMany(p => p.Comments)
                .HasForeignKey(d => d.NovelID)
                .HasConstraintName("FK_Comment_Novel");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasForeignKey(d => d.UserID)
                .HasConstraintName("FK_Comment_User");
        });

        modelBuilder.Entity<Genre>(entity =>
        {
            entity.HasKey(e => e.GenreID).HasName("PK__Genre__0385055E33D158D5");

            entity.ToTable("Genre", tb => tb.HasTrigger("tg_delete_genre"));

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentID)
                .HasConstraintName("FK_Genre_Genre");
        });

        modelBuilder.Entity<Menu>(entity =>
        {
            entity.HasKey(e => e.MenuID).HasName("PK__tmp_ms_x__C99ED2505887AF99");

            entity.ToTable("Menu", tb => tb.HasTrigger("tg_delete_menu"));

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Icon).HasMaxLength(100);
            entity.Property(e => e.OrderBy).HasDefaultValue(0);
            entity.Property(e => e.Path).HasColumnType("text");
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.URL).HasColumnType("text");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentID)
                .HasConstraintName("FK_Menu_Menu");
        });

        modelBuilder.Entity<Novel>(entity =>
        {
            entity.HasKey(e => e.NovelID).HasName("PK__tmp_ms_x__6B586F7F9A590138");

            entity.ToTable("Novel", tb => tb.HasTrigger("tg_delete_novel"));

            entity.Property(e => e.CoverImage).HasColumnType("ntext");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnType("ntext");
            entity.Property(e => e.OtherName).HasColumnType("ntext");
            entity.Property(e => e.PublishedDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Publisher).WithMany(p => p.Novels)
                .HasForeignKey(d => d.PublisherID)
                .HasConstraintName("FK_Novel_User");
        });

        modelBuilder.Entity<NovelGenre>(entity =>
        {
            entity.ToTable("NovelGenre");

            entity.HasOne(d => d.Genre).WithMany(p => p.NovelGenres)
                .HasForeignKey(d => d.GenreID)
                .HasConstraintName("FK_NovelGenre_Genre");

            entity.HasOne(d => d.Novel).WithMany(p => p.NovelGenres)
                .HasForeignKey(d => d.NovelID)
                .HasConstraintName("FK_NovelGenre_Novel");
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => e.PermissionID).HasName("PK__tmp_ms_x__EFA6FB0FA6AE1515");

            entity.ToTable("Permission", tb => tb.HasTrigger("tg_delete_permission"));

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.TitleEN)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.ParentNavigation).WithMany(p => p.InverseParentNavigation)
                .HasForeignKey(d => d.Parent)
                .HasConstraintName("FK_Permission_Permission1");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.RatingID).HasName("PK__Rating__FCCDF85CF9E3FC15");

            entity.ToTable("Rating");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Novel).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.NovelID)
                .HasConstraintName("FK_Rating_Novel");

            entity.HasOne(d => d.User).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.UserID)
                .HasConstraintName("FK_Rating_User");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("Role", tb => tb.HasTrigger("tg_delete_role"));

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<RolesMenu>(entity =>
        {
            entity.HasKey(e => e.RolesMenusID).HasName("PK__RolesMen__262BA657BB467527");

            entity.HasOne(d => d.Menu).WithMany(p => p.RolesMenus)
                .HasForeignKey(d => d.MenuID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RolesMenus_Menu");

            entity.HasOne(d => d.Role).WithMany(p => p.RolesMenus)
                .HasForeignKey(d => d.RoleID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RolesMenus_Role");
        });

        modelBuilder.Entity<RolesPermission>(entity =>
        {
            entity.HasKey(e => e.RolesPermissions).HasName("PK__RolesPer__2E746EC1803C35E7");

            entity.HasOne(d => d.Permission).WithMany(p => p.RolesPermissions)
                .HasForeignKey(d => d.PermissionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RolesPermissions_Permission");

            entity.HasOne(d => d.Role).WithMany(p => p.RolesPermissions)
                .HasForeignKey(d => d.RoleID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RolesPermissions_Role");
        });

        modelBuilder.Entity<Token>(entity =>
        {
            entity.HasKey(e => e.TokenID).HasName("PK__Token__658FEE8ABDC32523");

            entity.ToTable("Token", tb => tb.HasTrigger("trgCheckTokenCount"));

            entity.Property(e => e.RevokeAt).HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.Tokens)
                .HasForeignKey(d => d.UserID)
                .HasConstraintName("FK_Token_Users");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserID).HasName("PK__tmp_ms_x__1788CCACBE19ECCC");

            entity.ToTable("User", tb => tb.HasTrigger("tg_delete_user"));

            entity.Property(e => e.UserID).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Avatar)
                .IsRequired()
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.Gender).HasMaxLength(10);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastName).HasMaxLength(50);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.UserCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsersRole>(entity =>
        {
            entity.HasKey(e => e.UsersRolesID).HasName("PK__tmp_ms_x__A97523674A7B3C08");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Role).WithMany(p => p.UsersRoles)
                .HasForeignKey(d => d.RoleID)
                .HasConstraintName("FK_UsersRoles_Role");

            entity.HasOne(d => d.User).WithMany(p => p.UsersRoles)
                .HasForeignKey(d => d.UserID)
                .HasConstraintName("FK_UsersRoles_User");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}